# ფაილში მონაცემების ჩაწერა
with open('example.txt', 'w') as file:
    file.write("გამარჯობა, სამყარო!\n")
    file.write("ეს არის Python-ის მაგალითი.\n")

# ფაილიდან მონაცემების ჩატვირთვა
with open('example.txt', 'r') as file:
    content = file.read()
    print(content)




###################################################

try:
    number = int(input("შეიყვანეთ რიცხვი: "))
    result = 10 / number
    print(f"შედეგი: {result}")
except ZeroDivisionError:
    print("შეცდომა: ნულის გაყოფა დაუშვებელია!")
except ValueError:
    print("შეცდომა: შეიყვანეთ რიცხვი!")
finally:
    print("გამონაკლისების მართვა დასრულდა.")


#################################################


from functools import reduce

# ლამდა ფუნქციები
add = lambda x, y: x + y
print(add(5, 3))

# map ფუნქცია
numbers = [1, 2, 3, 4, 5]
squared = list(map(lambda x: x ** 2, numbers))
print(squared)

# filter ფუნქცია
even_numbers = list(filter(lambda x: x % 2 == 0, numbers))
print(even_numbers)

# reduce ფუნქცია
sum_numbers = reduce(lambda x, y: x + y, numbers)
print(sum_numbers)


#############################


# გენერატორის შექმნა
def my_generator(n):
    for i in range(n):
        yield i * 2

# გენერატორის გამოყენება
gen = my_generator(5)
for value in gen:
    print(value)

######################################

# ძირითადი კლასის შექმნა
class Animal:
    def __init__(self, name):
        self.name = name

    def speak(self):
        raise NotImplementedError("Subclass must implement abstract method")

# მემკვიდრე კლასის შექმნა
class Dog(Animal):
    def speak(self):
        return f"{self.name} ამბობს: ვაუ ვაუ!"

class Cat(Animal):
    def speak(self):
        return f"{self.name} ამბობს: მეუ მეუ!"

# ობიექტების შექმნა და გამოყენება
dog = Dog("ბობი")
cat = Cat("მიუ")

print(dog.speak())
print(cat.speak())


####################################################

import threading
import time

def print_numbers():
    for i in range(1, 6):
        print(i)
        time.sleep(1)

def print_letters():
    for letter in 'ABCDE':
        print(letter)
        time.sleep(1)

# თრედების შექმნა
thread1 = threading.Thread(target=print_numbers)
thread2 = threading.Thread(target=print_letters)

# თრედების გაშვება
thread1.start()
thread2.start()

# თრედების დასრულების მოლოდინი
thread1.join()
thread2.join()

print("მუშაობა დასრულდა.")

###########################################
